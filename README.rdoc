= Multi Recipient Threaded Messages

This plugin provides basic private messaging functionality between the users
of a site, with multi recipient capabilities. 
It's not big on features but the idea is that it's nice and simple
and light on resources.

It's not bound to specific model names and plays nice with will_paginate.

= Setup

First create the private message model by running the 
multi_recipients_threaded_messages:models generator, passing three parameters - 
the name you want to use for the Message and 
Received Message models and the name of the User model.

For all examples in the README, we will use Message, ReceivedMessage and User.

  rails generate multi_recipients_threaded_messages:models User Message ReceivedMessage

Now add the following entry to the model which will have the messages

  has_private_messages

If you have used anything other than "Message", you will have to pass the
correct class name along as :class_name.

If you have used anything other than "ReceivedMessage", you will have to pass the
correct class name along as :received_class_name.

example:

  has_private_messages :class_name => "MyMessageClass", :received_class_name => "MyReceivedMessageClass"

That's it.

= Usage

Examples assume you're using a user model of User with the :login attribute, 
message model of Message and received message model of ReceivedMessage.

== Creating / sending a message:

  jerry = User.find_by_login("jerry")
  george = User.find_by_login("george")
  
  message = Message.new
  message.subject = "Happy Festivus, son"
  message.body = "It's time for the Feats of Strength."
  message.sender = george
  message.save
  
  received_message = ReceivedMessageModel.new
  received_message.sent_message = message
  received_message.recipient = jerry
  received_message.save

== Reading a message

  message = Message.read(id, user)
  
If the user is the sender, it returns the message object that matches the id.
If the user a recipient, it returns the message object where id either matches the ReceivedMessage id or Message id.
If unread, it checks to see if the passed user is the recipient and if so marks the last_read_at timestamp.

You can also check if a message has been read with the following:

  message.read?

== Retrieving a user's received mail

  newman = User.find_by_login("newman")
  newman.received_messages

The following will return Newman's number of unread messages:

  newman.unread_message_count
  
Or the following for true or false on whether there are unread messages:

  newman.unread_messages?
  
== Retrieving a user's sent mail

  newman = User.find_by_login("newman")
  newman.sent_messages
  
== Custom finds

  newman.sent_messages.find(:all,
                          :conditions => ["last_read_at < ?", 2.days.ago],
                          :limit => 20,
                          :order => "created_at ASC")

== Deleting a message

  newman = User.find_by_login("newman")
  message = Message.read(3, newman)
  message.mark_deleted(newman)
  
This will look at a message and mark it read by the sender or recipient,
based on whichever Newman is. It now will no longer appear in Newman's
messages.

  kramer = User.find_by_login("kramer")
  message = Message.read(3, kramer)
  message.mark_deleted

Now that both sender and recipient have marked the message deleted, it
gets destroyed. Should a message be sent to oneself, it will be deleted
in one step due to the sender and recipient being the same.

= Scaffold

A generator is included to create a basic controller and set of views.

Run the multi_recipients_threaded_messages:scaffold generator with the same options as before:

  rails generate multi_recipients_threaded_messages:scaffold User Message ReceivedMessage

The controller will be named with the pluralised version of the model name.

Then uncomment the entry at the top of both message models to establish the
:to accessor.

You should now have working messaging.

= Tests

Create test db (multi_recipient_threaded_messages_plugin_test) and then run tests from the plugin root directory

  rake test DB=mysql

=== Credits

Inspired by the simple-private-messages plugin by Jon Gilbraith: https://github.com/professionalnerd/simple-private-messages

=== License

Copyright (c) 2010 Youssef Chaker, released under the MIT license
